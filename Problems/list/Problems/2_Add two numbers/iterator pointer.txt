/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2);
    int len(ListNode *li);
};


int Solution::len(ListNode *li){
    int length = 0;
    while(li){
        length += 1;
        li = li->next;
    }
    return(length);
}

ListNode* Solution::addTwoNumbers(ListNode* l1, ListNode* l2){
    int length1 = len(l1);
    int length2 = len(l2);
    ListNode *result;
    ListNode *fi;
    int inc = 0;
    int pre_inc = 0;
    
    if(length1 > length2){
        result = l2;
    }
    else{
        result = l1;
    }
    fi = result;
    
    //length same
    while(true){
        
        inc = ((l1->val+l2->val+inc)-(l1->val+l2->val+inc)%10)/10;
        result->val = (l1->val+l2->val+pre_inc)%10;
        
        l1 = l1->next;
        l2 = l2->next;
        pre_inc = inc;
        if(!l1)
            break;
        result = result->next;
    }
    
    result = result->next = (length1<length2)?l2:l1;
    ListNode *notnull = result;
    
    while(notnull){
        
        inc = (result->val+inc - (result->val+inc)%10)/10;
        result->val = (result->val+pre_inc)%10;
        notnull = notnull->next;
        if(!notnull)
            break;
        result = result->next;
        pre_inc = inc;
    }
    
    if(inc){
        // result->next = new ListNode(1);
        ListNode extra(1);
        result->next = &extra;
    }
    return(fi);
    
}