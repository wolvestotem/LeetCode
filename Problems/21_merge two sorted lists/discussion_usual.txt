/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2);
};

ListNode* Solution::mergeTwoLists(ListNode* l1, ListNode* l2){
    if (l1 == nullptr) return(l2);
    if (l2 == nullptr) return(l1);
    ListNode *mergedlist;
    ListNode *head;
    //determine the head of merged
    if (l1->val<l2->val){
        head = l1;
        l1 = l1->next;
    }
    else{
        head = l2;
        l2 = l2->next;
    }
    
    mergedlist = head;
    //left part
    while (l1!=nullptr && l2!= nullptr){
        if (l1->val<l2->val){
            head = head->next = l1;
            l1 = l1->next;
        }
        else{
            head = head->next = l2;
            l2 = l2->next;
        }
        // head = head->next;
    }
    if (l1 == nullptr) head->next = l2;
    else if (l2 == nullptr) head->next = l1;
    //mergedlist is the begin of aimed list
    return(mergedlist);
    
}